name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    services:
      mongo_db:
        image: siddharth67/mongo-db:non-prod 
        ports: 
          - 27017:27017 # must use port mapping if running processes directly on the runner (i.e. not using container: ...)
    strategy:
      matrix:
        nodejs_version: [18, 19, 20]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup NodeJS Version ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}
      
      - name: Install Dependencies
        run: npm install
      
      - name: Unit Testing on Linux
        if: runner.os == 'Linux'
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: archived-test-result-ubuntu-latest-${{ matrix.nodejs_version }}
          path: coverage
          retention-days: 5

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
    env:
      MONGO_URI: 'mongodb://mongo-db:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # - name: Setup NodeJS Version 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      
      - name: Install Dependencies
        run: npm install
      
      - name: Unit Testing
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-result
          path: coverage
          retention-days: 5

  docker:
    name: Containerization
    permissions:
      packages: write
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dockerhub Login
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: GitHub Container Registry Login
      uses: docker/login-action@v2.2.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Image for Testing
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

    - name: Docker Image Testing
      run: |
        docker images
        docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        echo $IP
        echo Testing Image URL using wget
        wget -q -O - 127.0.0.1:3000/live | grep live

    - name: Docker Push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}